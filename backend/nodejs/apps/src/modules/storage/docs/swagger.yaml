openapi: 3.0.0
info:
  title: Storage Service API
  description: |
    RESTful API for the Storage Service - providing document storage, versioning, and retrieval capabilities
    with support for multiple storage backends (S3, Azure Blob Storage, Local filesystem).
  version: 1.0.0
  contact:
    name: API Support
    email: support@yourcompany.com

servers:
  - url: /api/v1/document
    description: Base API URL

tags:
  - name: Documents
    description: Document management operations
  - name: Versioning
    description: Document version control
  - name: Storage
    description: Direct storage operations

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Document:
      type: object
      properties:
        _id:
          type: string
          format: ObjectId
          description: Unique document identifier
        documentName:
          type: string
          description: Name of the document
        alternateDocumentName:
          type: string
          description: Alternative name for the document
        documentPath:
          type: string
          description: Path where the document is stored
        isVersionedFile:
          type: boolean
          description: Whether the document supports versioning
        mutationCount:
          type: integer
          description: Number of times the document has been modified
        permissions:
          type: string
          enum: [owner, editor, commentator, readonly]
          description: Access permissions for the document
        initiatorUserId:
          type: string
          format: ObjectId
          description: ID of the user who created the document
        sizeInBytes:
          type: integer
          description: Size of the document in bytes
        mimeType:
          type: string
          description: MIME type of the document
        extension:
          type: string
          description: File extension
        versionHistory:
          type: array
          items:
            $ref: '#/components/schemas/DocumentVersion'
          description: History of document versions
        customMetadata:
          type: array
          items:
            $ref: '#/components/schemas/CustomMetadata'
          description: Custom metadata associated with the document
        currentVersion:
          type: integer
          description: Current version number
          default: 0
        tags:
          type: array
          items:
            type: string
          description: Tags for document categorization
        createdAt:
          type: integer
          format: int64
          description: Creation timestamp (milliseconds since epoch)
        updatedAt:
          type: integer
          format: int64
          description: Last update timestamp (milliseconds since epoch)
        isDeleted:
          type: boolean
          description: Whether the document is deleted
          default: false
        storageVendor:
          type: string
          enum: [s3, azureBlob, local]
          description: Storage vendor used for this document
      required:
        - documentName
        - isVersionedFile
        - orgId
        - storageVendor

    DocumentVersion:
      type: object
      properties:
        version:
          type: integer
          description: Version number
        userAssignedVersionLabel:
          type: string
          description: User-assigned label for this version
        note:
          type: string
          description: Note about this version
        extension:
          type: string
          description: File extension for this version
        createdAt:
          type: integer
          format: int64
          description: Creation timestamp (milliseconds since epoch)
        initiatedByUserId:
          type: string
          format: ObjectId
          description: ID of the user who created this version
        size:
          type: integer
          description: Size of this version in bytes

    CustomMetadata:
      type: object
      properties:
        key:
          type: string
          description: Metadata key
        value:
          type: object
          description: Metadata value
      required:
        - key

    StorageInfo:
      type: object
      properties:
        url:
          type: string
          description: URL where the document is stored
        localPath:
          type: string
          description: Local file path (for local storage only)
      required:
        - url

    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message
        code:
          type: integer
          description: Error code
        details:
          type: object
          description: Additional error details

    SignedUrlResponse:
      type: object
      properties:
        signedUrl:
          type: string
          description: Signed URL for document access or upload

    UploadRequest:
      type: object
      properties:
        documentName:
          type: string
          description: Name of the document
        documentPath:
          type: string
          description: Optional path for document storage
        alternateDocumentName:
          type: string
          description: Alternative name for the document
        permissions:
          type: string
          enum: [owner, editor, commentator, readonly]
          description: Access permissions for the document
        customMetadata:
          type: object
          description: Custom metadata to associate with the document
        isVersionedFile:
          type: string
          description: Whether the document supports versioning (as string "true"/"false")
      required:
        - documentName
        - isVersionedFile

    CreateDocumentRequest:
      type: object
      properties:
        documentName:
          type: string
          description: Name of the document
        alternateDocumentName:
          type: string
          description: Alternative name for the document
        documentPath:
          type: string
          description: Path for document storage
        permissions:
          type: string
          enum: [owner, editor, commentator, readonly]
          description: Access permissions for the document
        metaData:
          type: object
          description: Custom metadata to associate with the document
        isVersionedFile:
          type: boolean
          description: Whether the document supports versioning
      required:
        - documentName
        - documentPath

    UploadNextVersionRequest:
      type: object
      properties:
        currentVersionNote:
          type: string
          description: Note for the current version
        nextVersionNote:
          type: string
          description: Note for the next version
      required:
        - nextVersionNote

    RollbackRequest:
      type: object
      properties:
        version:
          type: string
          description: Version number to roll back to
        note:
          type: string
          description: Note about the rollback operation
      required:
        - version
        - note

security:
  - bearerAuth: []

paths:
  /upload:
    post:
      tags:
        - Documents
      summary: Upload a new document
      description: Upload a new document to the storage service
      operationId: uploadDocument
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload
                documentName:
                  type: string
                  description: Name of the document
                documentPath:
                  type: string
                  description: Optional path for document storage
                alternateDocumentName:
                  type: string
                  description: Alternative name for the document
                permissions:
                  type: string
                  enum: [owner, editor, commentator, readonly]
                  description: Access permissions for the document
                customMetadata:
                  type: object
                  description: Custom metadata to associate with the document
                isVersionedFile:
                  type: string
                  description: Whether the document supports versioning (as string "true"/"false")
              required:
                - file
                - documentName
                - isVersionedFile
        required: true
      responses:
        '200':
          description: Document uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /placeholder:
    post:
      tags:
        - Documents
      summary: Create a document placeholder
      description: Create a document placeholder for future direct uploads
      operationId: createPlaceholder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDocumentRequest'
        required: true
      responses:
        '200':
          description: Placeholder created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{documentId}:
    get:
      tags:
        - Documents
      summary: Get document by ID
      description: Retrieve document metadata by ID
      operationId: getDocumentById
      parameters:
        - name: documentId
          in: path
          description: Document ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Invalid document ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Documents
      summary: Mark document as deleted
      description: Mark a document as deleted (soft delete)
      operationId: deleteDocumentById
      parameters:
        - name: documentId
          in: path
          description: Document ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Document marked as deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Invalid document ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{documentId}/download:
    get:
      tags:
        - Documents
      summary: Download a document
      description: Get a signed URL to download a document or stream it for local storage
      operationId: downloadDocument
      parameters:
        - name: documentId
          in: path
          description: Document ID
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: Version number to download (default is latest)
          required: false
          schema:
            type: integer
            minimum: 0
        - name: expirationTimeInSeconds
          in: query
          description: Expiration time for the signed URL in seconds (default is 3600)
          required: false
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignedUrlResponse'
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{documentId}/buffer:
    get:
      tags:
        - Storage
      summary: Get document buffer
      description: Get the document's content as a buffer
      operationId: getDocumentBuffer
      parameters:
        - name: documentId
          in: path
          description: Document ID
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: Version number to retrieve (default is latest)
          required: false
          schema:
            type: integer
            minimum: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    format: binary
                    description: Document content buffer
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Storage
      summary: Update document buffer
      description: Update a document's content
      operationId: updateDocumentBuffer
      parameters:
        - name: documentId
          in: path
          description: Document ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The new file content
              required:
                - file
        required: true
      responses:
        '200':
          description: Document updated successfully
          content:
            application/json:
              schema:
                type: string
                description: Storage URL of the updated document
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{documentId}/uploadNextVersion:
    post:
      tags:
        - Versioning
      summary: Upload next version of a document
      description: Upload a new version of an existing document
      operationId: uploadNextVersion
      parameters:
        - name: documentId
          in: path
          description: Document ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The new file content
                currentVersionNote:
                  type: string
                  description: Note for the current version
                nextVersionNote:
                  type: string
                  description: Note for the next version
              required:
                - file
        required: true
      responses:
        '200':
          description: New version uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Invalid request or document not versioned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: File format mismatch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{documentId}/rollBack:
    post:
      tags:
        - Versioning
      summary: Roll back to a previous version
      description: Restore a document to a previous version
      operationId: rollBackToPreviousVersion
      parameters:
        - name: documentId
          in: path
          description: Document ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RollbackRequest'
        required: true
      responses:
        '200':
          description: Document rolled back successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Invalid request or document not versioned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{documentId}/directUpload:
    post:
      tags:
        - Storage
      summary: Get URL for direct upload
      description: Generate a presigned URL for directly uploading to storage
      operationId: getDirectUploadUrl
      parameters:
        - name: documentId
          in: path
          description: Document ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Direct upload URL generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  signedUrl:
                    type: string
                    description: URL for direct upload
                  documentId:
                    type: string
                    description: Document ID
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{documentId}/isModified:
    get:
      tags:
        - Versioning
      summary: Check if document is modified
      description: Check if a document has been modified since its last version
      operationId: isDocumentModified
      parameters:
        - name: documentId
          in: path
          description: Document ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: boolean
                description: Whether the document is modified
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /internal/upload:
    post:
      tags:
        - Documents
      summary: Internal upload endpoint
      description: Upload a document through an internal service-to-service API
      operationId: internalUploadDocument
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload
                documentName:
                  type: string
                  description: Name of the document
                documentPath:
                  type: string
                  description: Optional path for document storage
                alternateDocumentName:
                  type: string
                  description: Alternative name for the document
                permissions:
                  type: string
                  enum: [owner, editor, commentator, readonly]
                  description: Access permissions for the document
                customMetadata:
                  type: object
                  description: Custom metadata to associate with the document
                isVersionedFile:
                  type: string
                  description: Whether the document supports versioning (as string "true"/"false")
              required:
                - file
                - documentName
                - isVersionedFile
        required: true
      responses:
        '200':
          description: Document uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /internal/placeholder:
    post:
      tags:
        - Documents
      summary: Internal placeholder creation endpoint
      description: Create a document placeholder through an internal service-to-service API
      operationId: internalCreatePlaceholder
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDocumentRequest'
        required: true
      responses:
        '200':
          description: Placeholder created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

# The remaining internal endpoints follow the same pattern as their public counterparts
# but with different authorization requirements (scoped JWT tokens)